/* tslint:disable */
/* eslint-disable */
/**
 * sdk_api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Bid
 */
export interface Bid {
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    id: string;
    /**
     * 
     * @type {ChainType}
     * @memberof Bid
     */
    chainType: ChainType;
    /**
     * 
     * @type {NetworkId}
     * @memberof Bid
     */
    networkId: NetworkId;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    itemDocumentId: string;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    bidder: string;
    /**
     * 
     * @type {number}
     * @memberof Bid
     */
    bidPrice: number;
    /**
     * 
     * @type {CryptoCurrencyRate}
     * @memberof Bid
     */
    cryptoCurrencyRate: CryptoCurrencyRate;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    transactionAt: string;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    transactionHash: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ChainType {
    Ethereum = 'ethereum'
}

/**
 * ContractERC721またはContractERC721Shopに必要なデータ
 * @export
 * @interface ContractDataERC721Shop
 */
export interface ContractDataERC721Shop {
    /**
     * 
     * @type {ChainType}
     * @memberof ContractDataERC721Shop
     */
    chainType: ChainType;
    /**
     * 
     * @type {NetworkId}
     * @memberof ContractDataERC721Shop
     */
    networkId: NetworkId;
    /**
     * 
     * @type {string}
     * @memberof ContractDataERC721Shop
     */
    contractAddress: string;
    /**
     * JSON.stringifyしたもの
     * @type {string}
     * @memberof ContractDataERC721Shop
     */
    abi: string;
}
/**
 * ContractERC721のデータ
 * @export
 * @interface ContractERC721
 */
export interface ContractERC721 {
    /**
     * 
     * @type {string}
     * @memberof ContractERC721
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ContractERC721
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ContractERC721
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof ContractERC721
     */
    name: string;
    /**
     * 
     * @type {ChainType}
     * @memberof ContractERC721
     */
    chainType: ChainType;
    /**
     * 
     * @type {NetworkId}
     * @memberof ContractERC721
     */
    networkId: NetworkId;
    /**
     * 
     * @type {string}
     * @memberof ContractERC721
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof ContractERC721
     */
    initialDeployBlockNumber: number;
    /**
     * 
     * @type {TokenStandardType}
     * @memberof ContractERC721
     */
    tokenStandardType: TokenStandardType;
}
/**
 * 
 * @export
 * @interface CryptoCurrencyRate
 */
export interface CryptoCurrencyRate {
    /**
     * 
     * @type {string}
     * @memberof CryptoCurrencyRate
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoCurrencyRate
     */
    updateAt: string;
    /**
     * 
     * @type {CryptoCurrencyType}
     * @memberof CryptoCurrencyRate
     */
    currency: CryptoCurrencyType;
    /**
     * 
     * @type {number}
     * @memberof CryptoCurrencyRate
     */
    jpy: number;
    /**
     * 
     * @type {number}
     * @memberof CryptoCurrencyRate
     */
    eur: number;
    /**
     * 
     * @type {number}
     * @memberof CryptoCurrencyRate
     */
    usd: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum CryptoCurrencyType {
    Eth = 'eth',
    Matic = 'matic'
}

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {WalletAddressProfile}
     * @memberof InlineObject
     */
    profile: WalletAddressProfile;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Item>}
     * @memberof InlineResponse200
     */
    data: Array<Item>;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse200
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Item}
     * @memberof InlineResponse2001
     */
    data: Item;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2001
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20010
     */
    meta?: object;
    /**
     * 
     * @type {InlineResponse20010Data}
     * @memberof InlineResponse20010
     */
    data?: InlineResponse20010Data;
}
/**
 * 
 * @export
 * @interface InlineResponse20010Data
 */
export interface InlineResponse20010Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010Data
     */
    imageId: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010Data
     */
    uploadSignedUrl: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010Data
     */
    readSignedUrl: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {InlineResponse2002Data}
     * @memberof InlineResponse2002
     */
    data: InlineResponse2002Data;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2002
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Data
 */
export interface InlineResponse2002Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Data
     */
    itemStockId: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {InlineResponse2003Data}
     * @memberof InlineResponse2003
     */
    data: InlineResponse2003Data;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2003
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Data
 */
export interface InlineResponse2003Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    signature: string;
    /**
     * 対応したコントラクトのメソッドに渡す
     * @type {Array<string | number | boolean | Array<any> | object>}
     * @memberof InlineResponse2003Data
     */
    contractMethodArg: Array<string | number | boolean | Array<any> | object>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<ItemStock>}
     * @memberof InlineResponse2004
     */
    data: Array<ItemStock>;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2004
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {InlineResponse2005Data}
     * @memberof InlineResponse2005
     */
    data: InlineResponse2005Data;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2005
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Data
 */
export interface InlineResponse2005Data {
    /**
     * 
     * @type {Array<ItemStock>}
     * @memberof InlineResponse2005Data
     */
    itemStocks: Array<ItemStock>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {ProductERC721}
     * @memberof InlineResponse2006
     */
    data: ProductERC721;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2006
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {Array<TokenERC721>}
     * @memberof InlineResponse2007
     */
    data: Array<TokenERC721>;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2007
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {InlineResponse2008Data}
     * @memberof InlineResponse2008
     */
    data: InlineResponse2008Data | null;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2008
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2008Data
 */
export interface InlineResponse2008Data {
    /**
     * 
     * @type {WalletAddressProfile}
     * @memberof InlineResponse2008Data
     */
    profile: WalletAddressProfile;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Data
     */
    avatarImageUrl: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {InlineResponse2009Data}
     * @memberof InlineResponse2009
     */
    data?: InlineResponse2009Data;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2009
     */
    meta?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2009Data
 */
export interface InlineResponse2009Data {
    /**
     * 
     * @type {WalletAddressProfile}
     * @memberof InlineResponse2009Data
     */
    profile?: WalletAddressProfile;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    message: string;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    description: string;
    /**
     * Itemのプレビュー用URL
     * @type {Array<PreviewMedia>}
     * @memberof Item
     */
    previews: Array<PreviewMedia>;
    /**
     * 
     * @type {ItemType}
     * @memberof Item
     */
    type: ItemType;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    startAt: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    endAt: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    price: number;
    /**
     * 
     * @type {CryptoCurrencyRate}
     * @memberof Item
     */
    cryptoCurrencyRate: CryptoCurrencyRate;
    /**
     * Mintに支払われる取引手数料
     * @type {number}
     * @memberof Item
     */
    feeRatePermill: number;
    /**
     * 任意のTag
     * @type {Array<string>}
     * @memberof Item
     */
    tags: Array<string>;
    /**
     * paymentMethodによって異なるデータ
     * @type {ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice | ItemPaymentMethodDataEthereumContractERC721ShopAuction | ItemPaymentMethodDataCreditCardStripeFixedPrice}
     * @memberof Item
     */
    paymentMethodData: ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice | ItemPaymentMethodDataEthereumContractERC721ShopAuction | ItemPaymentMethodDataCreditCardStripeFixedPrice;
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    itemStockIds: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    availableStockNum: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    productERC721Ids: Array<string>;
    /**
     * オークションItem以外は空配列が入る
     * @type {Array<Bid>}
     * @memberof Item
     */
    bids: Array<Bid>;
    /**
     * 
     * @type {object}
     * @memberof Item
     */
    metadata: object | null;
}
/**
 * 
 * @export
 * @interface ItemPaymentMethodDataCreditCardStripeFixedPrice
 */
export interface ItemPaymentMethodDataCreditCardStripeFixedPrice {
    /**
     * 
     * @type {string}
     * @memberof ItemPaymentMethodDataCreditCardStripeFixedPrice
     */
    paymentMethod: ItemPaymentMethodDataCreditCardStripeFixedPricePaymentMethodEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemPaymentMethodDataCreditCardStripeFixedPricePaymentMethodEnum {
    CreditCardStripeFixedPrice = 'credit-card-stripe-fixed-price'
}

/**
 * 
 * @export
 * @interface ItemPaymentMethodDataEthereumContractERC721ShopAuction
 */
export interface ItemPaymentMethodDataEthereumContractERC721ShopAuction {
    /**
     * 
     * @type {string}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopAuction
     */
    paymentMethod: ItemPaymentMethodDataEthereumContractERC721ShopAuctionPaymentMethodEnum;
    /**
     * 
     * @type {ContractDataERC721Shop}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopAuction
     */
    contractDataERC721Shop: ContractDataERC721Shop;
    /**
     * 
     * @type {number}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopAuction
     */
    minBidPercentage: number;
    /**
     * 
     * @type {string}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopAuction
     */
    defaultEndAt: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemPaymentMethodDataEthereumContractERC721ShopAuctionPaymentMethodEnum {
    EthereumContractErc721ShopAuction = 'ethereum-contract-erc721-shop-auction'
}

/**
 * 
 * @export
 * @interface ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice
 */
export interface ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice {
    /**
     * 
     * @type {string}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice
     */
    paymentMethod: ItemPaymentMethodDataEthereumContractERC721ShopFixedPricePaymentMethodEnum;
    /**
     * 
     * @type {ContractDataERC721Shop}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice
     */
    contractDataERC721Shop: ContractDataERC721Shop;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemPaymentMethodDataEthereumContractERC721ShopFixedPricePaymentMethodEnum {
    EthereumContractErc721ShopFixedPrice = 'ethereum-contract-erc721-shop-fixed-price'
}

/**
 * 
 * @export
 * @interface ItemStock
 */
export interface ItemStock {
    /**
     * 
     * @type {string}
     * @memberof ItemStock
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ItemStock
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ItemStock
     */
    updateAt: string;
    /**
     * 
     * @type {ItemStockStatus}
     * @memberof ItemStock
     */
    status: ItemStockStatus;
    /**
     * 
     * @type {Array<ProductERC721>}
     * @memberof ItemStock
     */
    productsData: Array<ProductERC721>;
    /**
     * 
     * @type {Item}
     * @memberof ItemStock
     */
    item: Item;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ItemStockStatus {
    Created = 'created',
    Minted = 'minted'
}

/**
 * アイテムの種類
 * @export
 * @enum {string}
 */
export enum ItemType {
    Normal = 'normal',
    WithPhysicalItem = 'with-physical-item'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum NetworkId {
    NUMBER_1 = 1,
    NUMBER_4 = 4,
    NUMBER_80001 = 80001,
    NUMBER_137 = 137,
    NUMBER_31337 = 31337
}

/**
 * プレビュー用のメディア
 * @export
 * @interface PreviewMedia
 */
export interface PreviewMedia {
    /**
     * 
     * @type {string}
     * @memberof PreviewMedia
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof PreviewMedia
     */
    mimeType: string;
}
/**
 * 
 * @export
 * @interface ProductERC721
 */
export interface ProductERC721 {
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    status: ProductERC721StatusEnum;
    /**
     * 
     * @type {TokenStandardType}
     * @memberof ProductERC721
     */
    tokenStandardType: TokenStandardType;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    contractERC721Id: string;
    /**
     * 
     * @type {number}
     * @memberof ProductERC721
     */
    tokenId: number;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    tokenURI: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    creatorAddress: string;
    /**
     * 
     * @type {object}
     * @memberof ProductERC721
     */
    metadata: object | null;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    itemStockDocumentId: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    productBlueprintId: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductERC721
     */
    productGroupId: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductERC721StatusEnum {
    Created = 'created',
    PackedInItem = 'packed-in-item',
    TxProgressing = 'tx-progressing',
    Minted = 'minted',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum SignatureType {
    FixedPrice = 'ethereum-contract-erc721-shop-fixed-price',
    AuctionBid = 'ethereum-contract-erc721-shop-auction-bid',
    AuctionWithdraw = 'ethereum-contract-erc721-shop-auction-withdraw'
}

/**
 * 
 * @export
 * @interface TokenERC721
 */
export interface TokenERC721 {
    /**
     * 
     * @type {string}
     * @memberof TokenERC721
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TokenERC721
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof TokenERC721
     */
    updateAt: string;
    /**
     * 
     * @type {TokenStandardType}
     * @memberof TokenERC721
     */
    tokenStandardType: TokenStandardType;
    /**
     * 
     * @type {string}
     * @memberof TokenERC721
     */
    contractERC721Id: string;
    /**
     * 
     * @type {number}
     * @memberof TokenERC721
     */
    tokenId: number;
    /**
     * 
     * @type {string}
     * @memberof TokenERC721
     */
    tokenURI: string;
    /**
     * 
     * @type {object}
     * @memberof TokenERC721
     */
    metadata: object;
    /**
     * 
     * @type {string}
     * @memberof TokenERC721
     */
    mintTransactionHash: string;
    /**
     * 
     * @type {string}
     * @memberof TokenERC721
     */
    initialOwnerAddress: string;
    /**
     * 
     * @type {string}
     * @memberof TokenERC721
     */
    currentOwnerAddress: string;
    /**
     * 
     * @type {Array<TransferData>}
     * @memberof TokenERC721
     */
    transferHistory: Array<TransferData>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum TokenStandardType {
    Erc721 = 'ERC721'
}

/**
 * 
 * @export
 * @interface TransferData
 */
export interface TransferData {
    /**
     * 
     * @type {string}
     * @memberof TransferData
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof TransferData
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof TransferData
     */
    transactionHash: string;
}
/**
 * 
 * @export
 * @interface WalletAddressProfile
 */
export interface WalletAddressProfile {
    /**
     * 
     * @type {string}
     * @memberof WalletAddressProfile
     */
    walletAddress: string;
    /**
     * 
     * @type {string}
     * @memberof WalletAddressProfile
     */
    avatarImageId: string;
    /**
     * 
     * @type {string}
     * @memberof WalletAddressProfile
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof WalletAddressProfile
     */
    bio: string;
    /**
     * 
     * @type {string}
     * @memberof WalletAddressProfile
     */
    twitterAccountName: string;
    /**
     * 
     * @type {string}
     * @memberof WalletAddressProfile
     */
    instagramAccountName: string;
    /**
     * 
     * @type {string}
     * @memberof WalletAddressProfile
     */
    homepageUrl: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary アバター画像の署名付きURLの取得
         * @param {string} mintAccessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatar: async (mintAccessToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getAvatar', 'mintAccessToken', mintAccessToken)
            const localVarPath = `/sdk_v4/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したwalletAddressでBidしたItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [onlyBeforeEnd] 
         * @param {'price' | 'endAt'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBiddedItemStocksByWalletAddress: async (mintAccessToken: string, walletAddress: string, page: string, perPage: string, onlyBeforeEnd?: string, sortBy?: 'price' | 'endAt', sortDirection?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getBiddedItemStocksByWalletAddress', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'walletAddress' is not null or undefined
            assertParamExists('getBiddedItemStocksByWalletAddress', 'walletAddress', walletAddress)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getBiddedItemStocksByWalletAddress', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('getBiddedItemStocksByWalletAddress', 'perPage', perPage)
            const localVarPath = `/sdk_v4/itemStocks/getBiddedItemStocksByWalletAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (walletAddress !== undefined) {
                localVarQueryParameter['walletAddress'] = walletAddress;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (onlyBeforeEnd !== undefined) {
                localVarQueryParameter['onlyBeforeEnd'] = onlyBeforeEnd;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したwalletAddressで購入または落札したItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {'price' | 'createAt'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoughtItemStocksByWalletAddress: async (mintAccessToken: string, walletAddress: string, page: string, perPage: string, sortBy?: 'price' | 'createAt', sortDirection?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getBoughtItemStocksByWalletAddress', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'walletAddress' is not null or undefined
            assertParamExists('getBoughtItemStocksByWalletAddress', 'walletAddress', walletAddress)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getBoughtItemStocksByWalletAddress', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('getBoughtItemStocksByWalletAddress', 'perPage', perPage)
            const localVarPath = `/sdk_v4/itemStocks/getBoughtItemStocksByWalletAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (walletAddress !== undefined) {
                localVarQueryParameter['walletAddress'] = walletAddress;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロジェクトのItemをId指定で取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemById: async (mintAccessToken: string, itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getItemById', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemById', 'itemId', itemId)
            const localVarPath = `/sdk_v4/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロジェクトのItemを全て取得する
         * @param {string} mintAccessToken 
         * @param {string} page 
         * @param {string} perPage 
         * @param {'beforeStart' | 'beforeEnd' | 'afterEnd'} [saleStatus] 
         * @param {'true' | 'false'} [onlyAvailableStock] 
         * @param {'ethereum-contract-erc721-shop-fixed-price' | 'ethereum-contract-erc721-shop-auction' | 'credit-card-stripe-fixed-price'} [paymentMethod] 
         * @param {string} [tags] , 区切りで指定
         * @param {'price'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (mintAccessToken: string, page: string, perPage: string, saleStatus?: 'beforeStart' | 'beforeEnd' | 'afterEnd', onlyAvailableStock?: 'true' | 'false', paymentMethod?: 'ethereum-contract-erc721-shop-fixed-price' | 'ethereum-contract-erc721-shop-auction' | 'credit-card-stripe-fixed-price', tags?: string, sortBy?: 'price', sortDirection?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getItems', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getItems', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('getItems', 'perPage', perPage)
            const localVarPath = `/sdk_v4/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (saleStatus !== undefined) {
                localVarQueryParameter['saleStatus'] = saleStatus;
            }

            if (onlyAvailableStock !== undefined) {
                localVarQueryParameter['onlyAvailableStock'] = onlyAvailableStock;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['paymentMethod'] = paymentMethod;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Itemにパックされていて、ItemのstatusがpublishなProductERC721を取得
         * @param {string} mintAccessToken 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductERC721ById: async (mintAccessToken: string, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getProductERC721ById', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductERC721ById', 'id', id)
            const localVarPath = `/sdk_v4/products/getProductERC721ById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロフィールがない場合はnullがdataの値に入る
         * @summary ウォレットに紐づくプロフィールの取得
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (mintAccessToken: string, walletAddress: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getProfile', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'walletAddress' is not null or undefined
            assertParamExists('getProfile', 'walletAddress', walletAddress)
            const localVarPath = `/sdk_v4/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (walletAddress !== undefined) {
                localVarQueryParameter['walletAddress'] = walletAddress;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スマコンで販売している`Item`の販売可能な(まだ売れていない)`ItemStockId`を取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellableItemStockERC721Id: async (mintAccessToken: string, itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getSellableItemStockERC721Id', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getSellableItemStockERC721Id', 'itemId', itemId)
            const localVarPath = `/sdk_v4/items/getSellableItemStockERC721Id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Item購入に関してスマコンの操作に必要なSignを返す
         * @param {string} mintAccessToken 
         * @param {string} itemStockId 
         * @param {SignatureType} signatureType 
         * @param {string} [walletAddress] 購入時のみ必須
         * @param {'jp' | 'unknown'} [residence] 購入時のみ必須
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignByItemStockId: async (mintAccessToken: string, itemStockId: string, signatureType: SignatureType, walletAddress?: string, residence?: 'jp' | 'unknown', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getSignByItemStockId', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'itemStockId' is not null or undefined
            assertParamExists('getSignByItemStockId', 'itemStockId', itemStockId)
            // verify required parameter 'signatureType' is not null or undefined
            assertParamExists('getSignByItemStockId', 'signatureType', signatureType)
            const localVarPath = `/sdk_v4/itemStocks/sign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemStockId !== undefined) {
                localVarQueryParameter['itemStockId'] = itemStockId;
            }

            if (signatureType !== undefined) {
                localVarQueryParameter['signatureType'] = signatureType;
            }

            if (walletAddress !== undefined) {
                localVarQueryParameter['walletAddress'] = walletAddress;
            }

            if (residence !== undefined) {
                localVarQueryParameter['residence'] = residence;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary walletAddressに紐づくTokenERC721を全て取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenERC721sByWalletAddress: async (mintAccessToken: string, walletAddress: string, page: string, perPage: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getTokenERC721sByWalletAddress', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'walletAddress' is not null or undefined
            assertParamExists('getTokenERC721sByWalletAddress', 'walletAddress', walletAddress)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getTokenERC721sByWalletAddress', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('getTokenERC721sByWalletAddress', 'perPage', perPage)
            const localVarPath = `/sdk_v4/tokens/getTokenERC721sByWalletAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (walletAddress !== undefined) {
                localVarQueryParameter['walletAddress'] = walletAddress;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ウォレットに紐づくプロフィールの作成
         * @param {string} mintAccessToken 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: async (mintAccessToken: string, inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('updateProfile', 'mintAccessToken', mintAccessToken)
            const localVarPath = `/sdk_v4/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary アバター画像の署名付きURLの取得
         * @param {string} mintAccessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvatar(mintAccessToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvatar(mintAccessToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したwalletAddressでBidしたItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [onlyBeforeEnd] 
         * @param {'price' | 'endAt'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBiddedItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, onlyBeforeEnd?: string, sortBy?: 'price' | 'endAt', sortDirection?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBiddedItemStocksByWalletAddress(mintAccessToken, walletAddress, page, perPage, onlyBeforeEnd, sortBy, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したwalletAddressで購入または落札したItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {'price' | 'createAt'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoughtItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, sortBy?: 'price' | 'createAt', sortDirection?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoughtItemStocksByWalletAddress(mintAccessToken, walletAddress, page, perPage, sortBy, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロジェクトのItemをId指定で取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemById(mintAccessToken: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemById(mintAccessToken, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロジェクトのItemを全て取得する
         * @param {string} mintAccessToken 
         * @param {string} page 
         * @param {string} perPage 
         * @param {'beforeStart' | 'beforeEnd' | 'afterEnd'} [saleStatus] 
         * @param {'true' | 'false'} [onlyAvailableStock] 
         * @param {'ethereum-contract-erc721-shop-fixed-price' | 'ethereum-contract-erc721-shop-auction' | 'credit-card-stripe-fixed-price'} [paymentMethod] 
         * @param {string} [tags] , 区切りで指定
         * @param {'price'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(mintAccessToken: string, page: string, perPage: string, saleStatus?: 'beforeStart' | 'beforeEnd' | 'afterEnd', onlyAvailableStock?: 'true' | 'false', paymentMethod?: 'ethereum-contract-erc721-shop-fixed-price' | 'ethereum-contract-erc721-shop-auction' | 'credit-card-stripe-fixed-price', tags?: string, sortBy?: 'price', sortDirection?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems(mintAccessToken, page, perPage, saleStatus, onlyAvailableStock, paymentMethod, tags, sortBy, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Itemにパックされていて、ItemのstatusがpublishなProductERC721を取得
         * @param {string} mintAccessToken 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductERC721ById(mintAccessToken: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductERC721ById(mintAccessToken, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロフィールがない場合はnullがdataの値に入る
         * @summary ウォレットに紐づくプロフィールの取得
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(mintAccessToken: string, walletAddress: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(mintAccessToken, walletAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary スマコンで販売している`Item`の販売可能な(まだ売れていない)`ItemStockId`を取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSellableItemStockERC721Id(mintAccessToken: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSellableItemStockERC721Id(mintAccessToken, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Item購入に関してスマコンの操作に必要なSignを返す
         * @param {string} mintAccessToken 
         * @param {string} itemStockId 
         * @param {SignatureType} signatureType 
         * @param {string} [walletAddress] 購入時のみ必須
         * @param {'jp' | 'unknown'} [residence] 購入時のみ必須
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignByItemStockId(mintAccessToken: string, itemStockId: string, signatureType: SignatureType, walletAddress?: string, residence?: 'jp' | 'unknown', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignByItemStockId(mintAccessToken, itemStockId, signatureType, walletAddress, residence, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary walletAddressに紐づくTokenERC721を全て取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenERC721sByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenERC721sByWalletAddress(mintAccessToken, walletAddress, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ウォレットに紐づくプロフィールの作成
         * @param {string} mintAccessToken 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile(mintAccessToken: string, inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfile(mintAccessToken, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary アバター画像の署名付きURLの取得
         * @param {string} mintAccessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatar(mintAccessToken: string, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.getAvatar(mintAccessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したwalletAddressでBidしたItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [onlyBeforeEnd] 
         * @param {'price' | 'endAt'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBiddedItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, onlyBeforeEnd?: string, sortBy?: 'price' | 'endAt', sortDirection?: 'asc' | 'desc', options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getBiddedItemStocksByWalletAddress(mintAccessToken, walletAddress, page, perPage, onlyBeforeEnd, sortBy, sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したwalletAddressで購入または落札したItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {'price' | 'createAt'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoughtItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, sortBy?: 'price' | 'createAt', sortDirection?: 'asc' | 'desc', options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getBoughtItemStocksByWalletAddress(mintAccessToken, walletAddress, page, perPage, sortBy, sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロジェクトのItemをId指定で取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemById(mintAccessToken: string, itemId: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getItemById(mintAccessToken, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロジェクトのItemを全て取得する
         * @param {string} mintAccessToken 
         * @param {string} page 
         * @param {string} perPage 
         * @param {'beforeStart' | 'beforeEnd' | 'afterEnd'} [saleStatus] 
         * @param {'true' | 'false'} [onlyAvailableStock] 
         * @param {'ethereum-contract-erc721-shop-fixed-price' | 'ethereum-contract-erc721-shop-auction' | 'credit-card-stripe-fixed-price'} [paymentMethod] 
         * @param {string} [tags] , 区切りで指定
         * @param {'price'} [sortBy] 
         * @param {'asc' | 'desc'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems(mintAccessToken: string, page: string, perPage: string, saleStatus?: 'beforeStart' | 'beforeEnd' | 'afterEnd', onlyAvailableStock?: 'true' | 'false', paymentMethod?: 'ethereum-contract-erc721-shop-fixed-price' | 'ethereum-contract-erc721-shop-auction' | 'credit-card-stripe-fixed-price', tags?: string, sortBy?: 'price', sortDirection?: 'asc' | 'desc', options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getItems(mintAccessToken, page, perPage, saleStatus, onlyAvailableStock, paymentMethod, tags, sortBy, sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Itemにパックされていて、ItemのstatusがpublishなProductERC721を取得
         * @param {string} mintAccessToken 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductERC721ById(mintAccessToken: string, id: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getProductERC721ById(mintAccessToken, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロフィールがない場合はnullがdataの値に入る
         * @summary ウォレットに紐づくプロフィールの取得
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(mintAccessToken: string, walletAddress: string, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.getProfile(mintAccessToken, walletAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スマコンで販売している`Item`の販売可能な(まだ売れていない)`ItemStockId`を取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellableItemStockERC721Id(mintAccessToken: string, itemId: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getSellableItemStockERC721Id(mintAccessToken, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Item購入に関してスマコンの操作に必要なSignを返す
         * @param {string} mintAccessToken 
         * @param {string} itemStockId 
         * @param {SignatureType} signatureType 
         * @param {string} [walletAddress] 購入時のみ必須
         * @param {'jp' | 'unknown'} [residence] 購入時のみ必須
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignByItemStockId(mintAccessToken: string, itemStockId: string, signatureType: SignatureType, walletAddress?: string, residence?: 'jp' | 'unknown', options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getSignByItemStockId(mintAccessToken, itemStockId, signatureType, walletAddress, residence, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary walletAddressに紐づくTokenERC721を全て取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {string} page 
         * @param {string} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenERC721sByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.getTokenERC721sByWalletAddress(mintAccessToken, walletAddress, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ウォレットに紐づくプロフィールの作成
         * @param {string} mintAccessToken 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile(mintAccessToken: string, inlineObject?: InlineObject, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.updateProfile(mintAccessToken, inlineObject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary アバター画像の署名付きURLの取得
     * @param {string} mintAccessToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAvatar(mintAccessToken: string, options?: any) {
        return DefaultApiFp(this.configuration).getAvatar(mintAccessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したwalletAddressでBidしたItemStockを取得する
     * @param {string} mintAccessToken 
     * @param {string} walletAddress 
     * @param {string} page 
     * @param {string} perPage 
     * @param {string} [onlyBeforeEnd] 
     * @param {'price' | 'endAt'} [sortBy] 
     * @param {'asc' | 'desc'} [sortDirection] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBiddedItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, onlyBeforeEnd?: string, sortBy?: 'price' | 'endAt', sortDirection?: 'asc' | 'desc', options?: any) {
        return DefaultApiFp(this.configuration).getBiddedItemStocksByWalletAddress(mintAccessToken, walletAddress, page, perPage, onlyBeforeEnd, sortBy, sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したwalletAddressで購入または落札したItemStockを取得する
     * @param {string} mintAccessToken 
     * @param {string} walletAddress 
     * @param {string} page 
     * @param {string} perPage 
     * @param {'price' | 'createAt'} [sortBy] 
     * @param {'asc' | 'desc'} [sortDirection] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBoughtItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, sortBy?: 'price' | 'createAt', sortDirection?: 'asc' | 'desc', options?: any) {
        return DefaultApiFp(this.configuration).getBoughtItemStocksByWalletAddress(mintAccessToken, walletAddress, page, perPage, sortBy, sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロジェクトのItemをId指定で取得する
     * @param {string} mintAccessToken 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemById(mintAccessToken: string, itemId: string, options?: any) {
        return DefaultApiFp(this.configuration).getItemById(mintAccessToken, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロジェクトのItemを全て取得する
     * @param {string} mintAccessToken 
     * @param {string} page 
     * @param {string} perPage 
     * @param {'beforeStart' | 'beforeEnd' | 'afterEnd'} [saleStatus] 
     * @param {'true' | 'false'} [onlyAvailableStock] 
     * @param {'ethereum-contract-erc721-shop-fixed-price' | 'ethereum-contract-erc721-shop-auction' | 'credit-card-stripe-fixed-price'} [paymentMethod] 
     * @param {string} [tags] , 区切りで指定
     * @param {'price'} [sortBy] 
     * @param {'asc' | 'desc'} [sortDirection] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItems(mintAccessToken: string, page: string, perPage: string, saleStatus?: 'beforeStart' | 'beforeEnd' | 'afterEnd', onlyAvailableStock?: 'true' | 'false', paymentMethod?: 'ethereum-contract-erc721-shop-fixed-price' | 'ethereum-contract-erc721-shop-auction' | 'credit-card-stripe-fixed-price', tags?: string, sortBy?: 'price', sortDirection?: 'asc' | 'desc', options?: any) {
        return DefaultApiFp(this.configuration).getItems(mintAccessToken, page, perPage, saleStatus, onlyAvailableStock, paymentMethod, tags, sortBy, sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Itemにパックされていて、ItemのstatusがpublishなProductERC721を取得
     * @param {string} mintAccessToken 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProductERC721ById(mintAccessToken: string, id: string, options?: any) {
        return DefaultApiFp(this.configuration).getProductERC721ById(mintAccessToken, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロフィールがない場合はnullがdataの値に入る
     * @summary ウォレットに紐づくプロフィールの取得
     * @param {string} mintAccessToken 
     * @param {string} walletAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(mintAccessToken: string, walletAddress: string, options?: any) {
        return DefaultApiFp(this.configuration).getProfile(mintAccessToken, walletAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スマコンで販売している`Item`の販売可能な(まだ売れていない)`ItemStockId`を取得する
     * @param {string} mintAccessToken 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSellableItemStockERC721Id(mintAccessToken: string, itemId: string, options?: any) {
        return DefaultApiFp(this.configuration).getSellableItemStockERC721Id(mintAccessToken, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Item購入に関してスマコンの操作に必要なSignを返す
     * @param {string} mintAccessToken 
     * @param {string} itemStockId 
     * @param {SignatureType} signatureType 
     * @param {string} [walletAddress] 購入時のみ必須
     * @param {'jp' | 'unknown'} [residence] 購入時のみ必須
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSignByItemStockId(mintAccessToken: string, itemStockId: string, signatureType: SignatureType, walletAddress?: string, residence?: 'jp' | 'unknown', options?: any) {
        return DefaultApiFp(this.configuration).getSignByItemStockId(mintAccessToken, itemStockId, signatureType, walletAddress, residence, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary walletAddressに紐づくTokenERC721を全て取得する
     * @param {string} mintAccessToken 
     * @param {string} walletAddress 
     * @param {string} page 
     * @param {string} perPage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTokenERC721sByWalletAddress(mintAccessToken: string, walletAddress: string, page: string, perPage: string, options?: any) {
        return DefaultApiFp(this.configuration).getTokenERC721sByWalletAddress(mintAccessToken, walletAddress, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ウォレットに紐づくプロフィールの作成
     * @param {string} mintAccessToken 
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateProfile(mintAccessToken: string, inlineObject?: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).updateProfile(mintAccessToken, inlineObject, options).then((request) => request(this.axios, this.basePath));
    }
}


