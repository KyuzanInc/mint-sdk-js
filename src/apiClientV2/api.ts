/* tslint:disable */
/* eslint-disable */
/**
 * sdk_api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */
export enum ChainType {
    Ethereum = 'ethereum'
}

/**
 * ContractERC721またはContractERC721Shopに必要なデータ
 * @export
 * @interface ContractDataERC721Shop
 */
export interface ContractDataERC721Shop {
    /**
     * 
     * @type {ChainType}
     * @memberof ContractDataERC721Shop
     */
    chainType: ChainType;
    /**
     * 
     * @type {NetworkId}
     * @memberof ContractDataERC721Shop
     */
    networkId: NetworkId;
    /**
     * 
     * @type {string}
     * @memberof ContractDataERC721Shop
     */
    contractAddress: string;
    /**
     * JSON.stringifyしたもの
     * @type {string}
     * @memberof ContractDataERC721Shop
     */
    abi: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Item>}
     * @memberof InlineResponse200
     */
    data: Array<Item>;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse200
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Item}
     * @memberof InlineResponse2001
     */
    data: Item;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2001
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {InlineResponse2002Data}
     * @memberof InlineResponse2002
     */
    data: InlineResponse2002Data;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2002
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Data
 */
export interface InlineResponse2002Data {
    /**
     * 
     * @type {ResponseItemStock}
     * @memberof InlineResponse2002Data
     */
    itemStock: ResponseItemStock;
    /**
     * 
     * @type {ResponseProductERC721}
     * @memberof InlineResponse2002Data
     */
    productERC721: ResponseProductERC721;
    /**
     * 
     * @type {ResponseContractERC721}
     * @memberof InlineResponse2002Data
     */
    contractERC721: ResponseContractERC721;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {InlineResponse2003Data}
     * @memberof InlineResponse2003
     */
    data: InlineResponse2003Data;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2003
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Data
 */
export interface InlineResponse2003Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<ResponseTokenERC721>}
     * @memberof InlineResponse2004
     */
    data: Array<ResponseTokenERC721>;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2004
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {InlineResponse2005Data}
     * @memberof InlineResponse2005
     */
    data: InlineResponse2005Data;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2005
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Data
 */
export interface InlineResponse2005Data {
    /**
     * 
     * @type {Array<ResponseItem>}
     * @memberof InlineResponse2005Data
     */
    items: Array<ResponseItem>;
    /**
     * 
     * @type {Array<ResponseItemStock>}
     * @memberof InlineResponse2005Data
     */
    itemStocks: Array<ResponseItemStock>;
    /**
     * 
     * @type {Array<ResponseProductERC721>}
     * @memberof InlineResponse2005Data
     */
    productERC721s: Array<ResponseProductERC721>;
    /**
     * 
     * @type {Array<ResponseBid>}
     * @memberof InlineResponse2005Data
     */
    bids: Array<ResponseBid>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {InlineResponse2006Data}
     * @memberof InlineResponse2006
     */
    data: InlineResponse2006Data;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2006
     */
    meta: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2006Data
 */
export interface InlineResponse2006Data {
    /**
     * 
     * @type {Array<ResponseItemStock>}
     * @memberof InlineResponse2006Data
     */
    itemStocks: Array<ResponseItemStock>;
    /**
     * 
     * @type {Array<ResponseItem>}
     * @memberof InlineResponse2006Data
     */
    items: Array<ResponseItem>;
    /**
     * 
     * @type {Array<ResponseProductERC721>}
     * @memberof InlineResponse2006Data
     */
    productERC721s: Array<ResponseProductERC721>;
    /**
     * 
     * @type {Array<ResponseTokenERC721>}
     * @memberof InlineResponse2006Data
     */
    tokenERC721s: Array<ResponseTokenERC721>;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    message: string;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {ResponseItem}
     * @memberof Item
     */
    item: ResponseItem;
    /**
     * 
     * @type {Array<ResponseItemStock>}
     * @memberof Item
     */
    itemStocks: Array<ResponseItemStock>;
    /**
     * 
     * @type {Array<ResponseProductERC721>}
     * @memberof Item
     */
    productERC721s?: Array<ResponseProductERC721>;
}
/**
 * 
 * @export
 * @interface ItemPaymentMethodDataCreditCardStripeFixedPrice
 */
export interface ItemPaymentMethodDataCreditCardStripeFixedPrice {
    /**
     * 
     * @type {string}
     * @memberof ItemPaymentMethodDataCreditCardStripeFixedPrice
     */
    paymentMethod: ItemPaymentMethodDataCreditCardStripeFixedPricePaymentMethodEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemPaymentMethodDataCreditCardStripeFixedPricePaymentMethodEnum {
    CreditCardStripeFixedPrice = 'credit-card-stripe-fixed-price'
}

/**
 * 
 * @export
 * @interface ItemPaymentMethodDataEthereumContractERC721ShopAuction
 */
export interface ItemPaymentMethodDataEthereumContractERC721ShopAuction {
    /**
     * 
     * @type {string}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopAuction
     */
    paymentMethod: ItemPaymentMethodDataEthereumContractERC721ShopAuctionPaymentMethodEnum;
    /**
     * 
     * @type {ContractDataERC721Shop}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopAuction
     */
    contractDataERC721Shop: ContractDataERC721Shop;
    /**
     * 
     * @type {number}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopAuction
     */
    minBidPercentage: number;
    /**
     * 
     * @type {string}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopAuction
     */
    defaultEndAt: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemPaymentMethodDataEthereumContractERC721ShopAuctionPaymentMethodEnum {
    EthereumContractErc721ShopAuction = 'ethereum-contract-erc721-shop-auction'
}

/**
 * 
 * @export
 * @interface ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice
 */
export interface ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice {
    /**
     * 
     * @type {string}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice
     */
    paymentMethod: ItemPaymentMethodDataEthereumContractERC721ShopFixedPricePaymentMethodEnum;
    /**
     * 
     * @type {ContractDataERC721Shop}
     * @memberof ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice
     */
    contractDataERC721Shop: ContractDataERC721Shop;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemPaymentMethodDataEthereumContractERC721ShopFixedPricePaymentMethodEnum {
    EthereumContractErc721ShopFixedPrice = 'ethereum-contract-erc721-shop-fixed-price'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ItemStockStatus {
    Created = 'created',
    Minted = 'minted'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum NetworkId {
    NUMBER_1 = 1,
    NUMBER_4 = 4,
    NUMBER_80001 = 80001,
    NUMBER_137 = 137,
    NUMBER_31337 = 31337
}

/**
 * プレビュー用のメディア
 * @export
 * @interface PreviewMedia
 */
export interface PreviewMedia {
    /**
     * 
     * @type {string}
     * @memberof PreviewMedia
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof PreviewMedia
     */
    mimeType: string;
}
/**
 * 
 * @export
 * @interface ResponseBid
 */
export interface ResponseBid {
    /**
     * 
     * @type {string}
     * @memberof ResponseBid
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBid
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBid
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBid
     */
    itemDocumentId: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBid
     */
    bidder: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseBid
     */
    bidPrice: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseBid
     */
    transactionAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBid
     */
    transactionHash: string;
}
/**
 * ContractERC721のデータ
 * @export
 * @interface ResponseContractERC721
 */
export interface ResponseContractERC721 {
    /**
     * 
     * @type {string}
     * @memberof ResponseContractERC721
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseContractERC721
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseContractERC721
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseContractERC721
     */
    name: string;
    /**
     * 
     * @type {ChainType}
     * @memberof ResponseContractERC721
     */
    chainType: ChainType;
    /**
     * 
     * @type {NetworkId}
     * @memberof ResponseContractERC721
     */
    networkId: NetworkId;
    /**
     * 
     * @type {string}
     * @memberof ResponseContractERC721
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseContractERC721
     */
    initialDeployBlockNumber: number;
    /**
     * 
     * @type {TokenStandardType}
     * @memberof ResponseContractERC721
     */
    tokenStandardType: TokenStandardType;
}
/**
 * 
 * @export
 * @interface ResponseItem
 */
export interface ResponseItem {
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    description: string;
    /**
     * Itemのプレビュー用URL
     * @type {Array<PreviewMedia>}
     * @memberof ResponseItem
     */
    previews: Array<PreviewMedia>;
    /**
     * アイテムの種類
     * @type {string}
     * @memberof ResponseItem
     */
    type: ResponseItemTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    startAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    endAt: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseItem
     */
    price: number;
    /**
     * Mintに支払われる取引手数料
     * @type {number}
     * @memberof ResponseItem
     */
    feeRatePermill: number;
    /**
     * 任意のTag
     * @type {Array<string>}
     * @memberof ResponseItem
     */
    tags: Array<string>;
    /**
     * paymentMethodによって異なるデータ
     * @type {ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice | ItemPaymentMethodDataEthereumContractERC721ShopAuction | ItemPaymentMethodDataCreditCardStripeFixedPrice}
     * @memberof ResponseItem
     */
    paymentMethodData: ItemPaymentMethodDataEthereumContractERC721ShopFixedPrice | ItemPaymentMethodDataEthereumContractERC721ShopAuction | ItemPaymentMethodDataCreditCardStripeFixedPrice;
}

/**
    * @export
    * @enum {string}
    */
export enum ResponseItemTypeEnum {
    Normal = 'normal',
    WithPhysicalItem = 'with-physical-item'
}

/**
 * 
 * @export
 * @interface ResponseItemStock
 */
export interface ResponseItemStock {
    /**
     * 
     * @type {string}
     * @memberof ResponseItemStock
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItemStock
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItemStock
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItemStock
     */
    itemDocumentId: string;
    /**
     * 
     * @type {Array<ResponseItemStockProductsData>}
     * @memberof ResponseItemStock
     */
    productsData: Array<ResponseItemStockProductsData>;
    /**
     * 
     * @type {ItemStockStatus}
     * @memberof ResponseItemStock
     */
    status?: ItemStockStatus;
}
/**
 * 
 * @export
 * @interface ResponseItemStockProductsData
 */
export interface ResponseItemStockProductsData {
    /**
     * 
     * @type {TokenStandardType}
     * @memberof ResponseItemStockProductsData
     */
    tokenStandardType?: TokenStandardType;
    /**
     * 
     * @type {string}
     * @memberof ResponseItemStockProductsData
     */
    productId?: string;
}
/**
 * 
 * @export
 * @interface ResponseProductERC721
 */
export interface ResponseProductERC721 {
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    updateAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    status: ResponseProductERC721StatusEnum;
    /**
     * 
     * @type {TokenStandardType}
     * @memberof ResponseProductERC721
     */
    tokenStandardType: TokenStandardType;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    contractERC721Id: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseProductERC721
     */
    tokenId: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    tokenURI: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    creatorAddress: string;
    /**
     * 
     * @type {object}
     * @memberof ResponseProductERC721
     */
    metadata: object | null;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    itemStockDocumentId: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    productBlueprintId: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponseProductERC721
     */
    productGroupId: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum ResponseProductERC721StatusEnum {
    Created = 'created',
    PackedInItem = 'packed-in-item',
    TxProgressing = 'tx-progressing',
    Minted = 'minted',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface ResponseTokenERC721
 */
export interface ResponseTokenERC721 {
    /**
     * 
     * @type {string}
     * @memberof ResponseTokenERC721
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseTokenERC721
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseTokenERC721
     */
    updateAt: string;
    /**
     * 
     * @type {TokenStandardType}
     * @memberof ResponseTokenERC721
     */
    tokenStandardType: TokenStandardType;
    /**
     * 
     * @type {string}
     * @memberof ResponseTokenERC721
     */
    contractERC721Id: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseTokenERC721
     */
    tokenId: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseTokenERC721
     */
    tokenURI: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseTokenERC721
     */
    mintTransactionHash: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseTokenERC721
     */
    initialOwnerAddress: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseTokenERC721
     */
    currentOwnerAddress: string;
    /**
     * 
     * @type {Array<TransferData>}
     * @memberof ResponseTokenERC721
     */
    transferHistory: Array<TransferData>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum SignatureType {
    FixedPrice = 'ethereum-contract-erc721-shop-fixed-price',
    AuctionBid = 'ethereum-contract-erc721-shop-auction-bid',
    AuctionWithdraw = 'ethereum-contract-erc721-shop-auction-withdraw'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum TokenStandardType {
    Erc721 = 'ERC721'
}

/**
 * 
 * @export
 * @interface TransferData
 */
export interface TransferData {
    /**
     * 
     * @type {string}
     * @memberof TransferData
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof TransferData
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof TransferData
     */
    transactionHash: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定したwalletAddressでBidしたItemを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBiddedItemsByWalletAddress: async (mintAccessToken: string, walletAddress: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getBiddedItemsByWalletAddress', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'walletAddress' is not null or undefined
            assertParamExists('getBiddedItemsByWalletAddress', 'walletAddress', walletAddress)
            const localVarPath = `/sdk_v4/items/getBiddedItemsByWalletAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (walletAddress !== undefined) {
                localVarQueryParameter['walletAddress'] = walletAddress;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したwalletAddressで購入または落札したItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoughtItemStocksByWalletAddress: async (mintAccessToken: string, walletAddress: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getBoughtItemStocksByWalletAddress', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'walletAddress' is not null or undefined
            assertParamExists('getBoughtItemStocksByWalletAddress', 'walletAddress', walletAddress)
            const localVarPath = `/sdk_v4/items/getBoughtItemStocksByWalletAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (walletAddress !== undefined) {
                localVarQueryParameter['walletAddress'] = walletAddress;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロジェクトのItemをId指定で取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemById: async (mintAccessToken: string, itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getItemById', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemById', 'itemId', itemId)
            const localVarPath = `/sdk_v4/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スマコンで販売している`Item`の販売可能な(まだ売れていない)`ItemStock`詳細情報を取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemStockDetailERC721Shop: async (mintAccessToken: string, itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getItemStockDetailERC721Shop', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemStockDetailERC721Shop', 'itemId', itemId)
            const localVarPath = `/sdk_v4/items/getItemStockDetailERC721Shop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロジェクトのItemを全て取得する
         * @param {string} mintAccessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (mintAccessToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getItems', 'mintAccessToken', mintAccessToken)
            const localVarPath = `/sdk_v4/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スマコンの操作に必要なSignを返す
         * @param {string} mintAccessToken 
         * @param {string} itemStockId 
         * @param {SignatureType} signatureType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignByItemStockId: async (mintAccessToken: string, itemStockId: string, signatureType: SignatureType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getSignByItemStockId', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'itemStockId' is not null or undefined
            assertParamExists('getSignByItemStockId', 'itemStockId', itemStockId)
            // verify required parameter 'signatureType' is not null or undefined
            assertParamExists('getSignByItemStockId', 'signatureType', signatureType)
            const localVarPath = `/sdk_v4/itemStocks/sign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemStockId !== undefined) {
                localVarQueryParameter['itemStockId'] = itemStockId;
            }

            if (signatureType !== undefined) {
                localVarQueryParameter['signatureType'] = signatureType;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary walletAddressに紐づくTokenERC721を全て取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenERC721sByWalletAddress: async (mintAccessToken: string, walletAddress: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mintAccessToken' is not null or undefined
            assertParamExists('getTokenERC721sByWalletAddress', 'mintAccessToken', mintAccessToken)
            // verify required parameter 'walletAddress' is not null or undefined
            assertParamExists('getTokenERC721sByWalletAddress', 'walletAddress', walletAddress)
            const localVarPath = `/sdk_v4/tokens/getTokenERC721sByWalletAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (walletAddress !== undefined) {
                localVarQueryParameter['walletAddress'] = walletAddress;
            }

            if (mintAccessToken !== undefined && mintAccessToken !== null) {
                localVarHeaderParameter['mint-access-token'] = String(mintAccessToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定したwalletAddressでBidしたItemを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBiddedItemsByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBiddedItemsByWalletAddress(mintAccessToken, walletAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したwalletAddressで購入または落札したItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoughtItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoughtItemStocksByWalletAddress(mintAccessToken, walletAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロジェクトのItemをId指定で取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemById(mintAccessToken: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemById(mintAccessToken, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary スマコンで販売している`Item`の販売可能な(まだ売れていない)`ItemStock`詳細情報を取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemStockDetailERC721Shop(mintAccessToken: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemStockDetailERC721Shop(mintAccessToken, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロジェクトのItemを全て取得する
         * @param {string} mintAccessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(mintAccessToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems(mintAccessToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary スマコンの操作に必要なSignを返す
         * @param {string} mintAccessToken 
         * @param {string} itemStockId 
         * @param {SignatureType} signatureType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignByItemStockId(mintAccessToken: string, itemStockId: string, signatureType: SignatureType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignByItemStockId(mintAccessToken, itemStockId, signatureType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary walletAddressに紐づくTokenERC721を全て取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenERC721sByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenERC721sByWalletAddress(mintAccessToken, walletAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定したwalletAddressでBidしたItemを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBiddedItemsByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getBiddedItemsByWalletAddress(mintAccessToken, walletAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したwalletAddressで購入または落札したItemStockを取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoughtItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getBoughtItemStocksByWalletAddress(mintAccessToken, walletAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロジェクトのItemをId指定で取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemById(mintAccessToken: string, itemId: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getItemById(mintAccessToken, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スマコンで販売している`Item`の販売可能な(まだ売れていない)`ItemStock`詳細情報を取得する
         * @param {string} mintAccessToken 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemStockDetailERC721Shop(mintAccessToken: string, itemId: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getItemStockDetailERC721Shop(mintAccessToken, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロジェクトのItemを全て取得する
         * @param {string} mintAccessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems(mintAccessToken: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getItems(mintAccessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スマコンの操作に必要なSignを返す
         * @param {string} mintAccessToken 
         * @param {string} itemStockId 
         * @param {SignatureType} signatureType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignByItemStockId(mintAccessToken: string, itemStockId: string, signatureType: SignatureType, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getSignByItemStockId(mintAccessToken, itemStockId, signatureType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary walletAddressに紐づくTokenERC721を全て取得する
         * @param {string} mintAccessToken 
         * @param {string} walletAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenERC721sByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getTokenERC721sByWalletAddress(mintAccessToken, walletAddress, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 指定したwalletAddressでBidしたItemを取得する
     * @param {string} mintAccessToken 
     * @param {string} walletAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBiddedItemsByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any) {
        return DefaultApiFp(this.configuration).getBiddedItemsByWalletAddress(mintAccessToken, walletAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したwalletAddressで購入または落札したItemStockを取得する
     * @param {string} mintAccessToken 
     * @param {string} walletAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBoughtItemStocksByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any) {
        return DefaultApiFp(this.configuration).getBoughtItemStocksByWalletAddress(mintAccessToken, walletAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロジェクトのItemをId指定で取得する
     * @param {string} mintAccessToken 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemById(mintAccessToken: string, itemId: string, options?: any) {
        return DefaultApiFp(this.configuration).getItemById(mintAccessToken, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スマコンで販売している`Item`の販売可能な(まだ売れていない)`ItemStock`詳細情報を取得する
     * @param {string} mintAccessToken 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemStockDetailERC721Shop(mintAccessToken: string, itemId: string, options?: any) {
        return DefaultApiFp(this.configuration).getItemStockDetailERC721Shop(mintAccessToken, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロジェクトのItemを全て取得する
     * @param {string} mintAccessToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItems(mintAccessToken: string, options?: any) {
        return DefaultApiFp(this.configuration).getItems(mintAccessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スマコンの操作に必要なSignを返す
     * @param {string} mintAccessToken 
     * @param {string} itemStockId 
     * @param {SignatureType} signatureType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSignByItemStockId(mintAccessToken: string, itemStockId: string, signatureType: SignatureType, options?: any) {
        return DefaultApiFp(this.configuration).getSignByItemStockId(mintAccessToken, itemStockId, signatureType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary walletAddressに紐づくTokenERC721を全て取得する
     * @param {string} mintAccessToken 
     * @param {string} walletAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTokenERC721sByWalletAddress(mintAccessToken: string, walletAddress: string, options?: any) {
        return DefaultApiFp(this.configuration).getTokenERC721sByWalletAddress(mintAccessToken, walletAddress, options).then((request) => request(this.axios, this.basePath));
    }
}


